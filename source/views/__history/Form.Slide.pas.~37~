unit Form.Slide;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.ImgList,
  FMX.StdCtrls, FMX.Controls.Presentation, FMX.Edit, FMX.ListBox, FMX.Layouts,
  FMX.Objects, System.Actions, FMX.ActnList;

type
  TSlideForm = class(TForm)
    lnHeaderSeparator: TLine;
    loBody: TLayout;
    lbProject: TListBox;
    loFooter: TLayout;
    loLeftActions: TLayout;
    btnSave: TButton;
    btnCancel: TButton;
    loHeader: TLayout;
    lblProject: TLabel;
    imgHeader: TGlyph;
    actBase: TActionList;
    actSave: TAction;
    actCancel: TAction;
    procedure actSaveExecute(Sender: TObject);
    procedure actCancelExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    FModel: TObject;
  protected
    function CreateModel(): TObject; virtual; abstract;
    procedure Load(); virtual;
    procedure Save(); virtual;
    procedure Cancel(); virtual;

    property Model: TObject read FModel;
  public
    { Public declarations }
  end;

var
  SlideForm: TSlideForm;

implementation

uses
  Container.Images, Storage.Default;

{$R *.fmx}

procedure TSlideForm.actCancelExecute(Sender: TObject);
begin
  Cancel();
end;

procedure TSlideForm.actSaveExecute(Sender: TObject);
begin
  Save();
end;

procedure TSlideForm.Cancel;
begin
  Close();
end;

procedure TSlideForm.FormCreate(Sender: TObject);
begin
  FModel := CreateModel();
end;

procedure TSlideForm.Load;
begin
  var LStorage := TDefaultStorage<TObject>.Make();
  LStorage.LoadModel(FModel);
end;

procedure TSlideForm.Save;
begin
  var LStorage := TDefaultStorage<TObject>.Make();
  LStorage.SaveModel(FModel);
end;

end.
